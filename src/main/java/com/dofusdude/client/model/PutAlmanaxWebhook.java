/**
 * dofusdude
 * # A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save - [Go](https://github.com/dofusdude/dodugo) go get -u github.com/dofusdude/dodugo - [Python](https://github.com/dofusdude/dofusdude-py) pip install dofusdude - [PHP](https://github.com/dofusdude/dofusdude-php)  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my Discord.   ## Deploy now. Use forever. Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  ## Thank you! I highly welcome everyone on my [Discord](https://discord.gg/3EtHskZD8h) to just talk about projects and use cases or give feedback of any kind.  The servers have a fixed monthly cost to provide very fast responses. If you want to help me keeping them running or simply donate to that cause, consider becoming a [GitHub Sponsor](https://github.com/sponsors/dofusdude).
 *
 * The version of the OpenAPI document: 0.8.3
 * Contact: stelzo@steado.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dofusdude.client.model;

import com.dofusdude.client.model.CreateAlmanaxWebhookDailySettings;
import com.dofusdude.client.model.CreateAlmanaxWebhookMentionsValueInner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;


public class PutAlmanaxWebhook  {
  
 /**
   * from all available bonuses (ids) from /dofus2/meta/{language}/almanax/bonuses. Delete old entries with empty array []. Just null changes nothing.
  **/
  @JsonbProperty("bonus_whitelist")
  private List<String> bonusWhitelist = null;

 /**
   * from all available bonuses (ids) from /dofus2/meta/{language}/almanax/bonuses. Delete old entries with empty array []. Just null changes nothing.
  **/
  @JsonbProperty("bonus_blacklist")
  private List<String> bonusBlacklist = null;

 /**
   * Get the available subscriptions with /meta/webhooks/almanax
  **/
  @JsonbProperty("subscriptions")
  private List<String> subscriptions = null;

  @JsonbProperty("daily_settings")
  private CreateAlmanaxWebhookDailySettings dailySettings;

 /**
   * If false, it will use common local time formats and weekday translations. If true, the format is YYYY-MM-DD.
  **/
  @JsonbProperty("iso_date")
  private Boolean isoDate = false;

 /**
   * Almanax bonus ids mapped to array of mentions.
  **/
  @JsonbProperty("mentions")
  private Map<String, List<CreateAlmanaxWebhookMentionsValueInner>> mentions = null;

  @JsonbTypeSerializer(IntervalsEnum.Serializer.class)
  @JsonbTypeDeserializer(IntervalsEnum.Deserializer.class)
  public enum IntervalsEnum {

    DAILY(String.valueOf("daily")), WEEKLY(String.valueOf("weekly")), MONTHLY(String.valueOf("monthly"));


    String value;

    IntervalsEnum (String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static final class Deserializer implements JsonbDeserializer<IntervalsEnum> {
        @Override
        public IntervalsEnum deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
            for (IntervalsEnum b : IntervalsEnum.values()) {
                if (String.valueOf(b.value).equals(parser.getString())) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + parser.getString() + "'");
        }
    }

    public static final class Serializer implements JsonbSerializer<IntervalsEnum> {
        @Override
        public void serialize(IntervalsEnum obj, JsonGenerator generator, SerializationContext ctx) {
            generator.write(obj.value);
        }
    }
  }

  @JsonbProperty("intervals")
  private Set<IntervalsEnum> intervals = null;

  @JsonbTypeSerializer(WeeklyWeekdayEnum.Serializer.class)
  @JsonbTypeDeserializer(WeeklyWeekdayEnum.Deserializer.class)
  public enum WeeklyWeekdayEnum {

    SUNDAY(String.valueOf("sunday")), MONDAY(String.valueOf("monday")), TUESDAY(String.valueOf("tuesday")), WEDNESDAY(String.valueOf("wednesday")), THURSDAY(String.valueOf("thursday")), FRIDAY(String.valueOf("friday")), SATURDAY(String.valueOf("saturday"));


    String value;

    WeeklyWeekdayEnum (String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static final class Deserializer implements JsonbDeserializer<WeeklyWeekdayEnum> {
        @Override
        public WeeklyWeekdayEnum deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
            for (WeeklyWeekdayEnum b : WeeklyWeekdayEnum.values()) {
                if (String.valueOf(b.value).equals(parser.getString())) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + parser.getString() + "'");
        }
    }

    public static final class Serializer implements JsonbSerializer<WeeklyWeekdayEnum> {
        @Override
        public void serialize(WeeklyWeekdayEnum obj, JsonGenerator generator, SerializationContext ctx) {
            generator.write(obj.value);
        }
    }
  }

 /**
   * When to post the weekly preview at the specified time.
  **/
  @JsonbProperty("weekly_weekday")
  private WeeklyWeekdayEnum weeklyWeekday;

 /**
   * from all available bonuses (ids) from /dofus2/meta/{language}/almanax/bonuses. Delete old entries with empty array []. Just null changes nothing.
   * @return bonusWhitelist
  **/
  public List<String> getBonusWhitelist() {
    return bonusWhitelist;
  }

  /**
    * Set bonusWhitelist
  **/
  public void setBonusWhitelist(List<String> bonusWhitelist) {
    this.bonusWhitelist = bonusWhitelist;
  }

  public PutAlmanaxWebhook bonusWhitelist(List<String> bonusWhitelist) {
    this.bonusWhitelist = bonusWhitelist;
    return this;
  }

  public PutAlmanaxWebhook addBonusWhitelistItem(String bonusWhitelistItem) {
    if (this.bonusWhitelist == null) {
      this.bonusWhitelist = new ArrayList<>();
    }
    this.bonusWhitelist.add(bonusWhitelistItem);
    return this;
  }

 /**
   * from all available bonuses (ids) from /dofus2/meta/{language}/almanax/bonuses. Delete old entries with empty array []. Just null changes nothing.
   * @return bonusBlacklist
  **/
  public List<String> getBonusBlacklist() {
    return bonusBlacklist;
  }

  /**
    * Set bonusBlacklist
  **/
  public void setBonusBlacklist(List<String> bonusBlacklist) {
    this.bonusBlacklist = bonusBlacklist;
  }

  public PutAlmanaxWebhook bonusBlacklist(List<String> bonusBlacklist) {
    this.bonusBlacklist = bonusBlacklist;
    return this;
  }

  public PutAlmanaxWebhook addBonusBlacklistItem(String bonusBlacklistItem) {
    if (this.bonusBlacklist == null) {
      this.bonusBlacklist = new ArrayList<>();
    }
    this.bonusBlacklist.add(bonusBlacklistItem);
    return this;
  }

 /**
   * Get the available subscriptions with /meta/webhooks/almanax
   * @return subscriptions
  **/
  public List<String> getSubscriptions() {
    return subscriptions;
  }

  /**
    * Set subscriptions
  **/
  public void setSubscriptions(List<String> subscriptions) {
    this.subscriptions = subscriptions;
  }

  public PutAlmanaxWebhook subscriptions(List<String> subscriptions) {
    this.subscriptions = subscriptions;
    return this;
  }

  public PutAlmanaxWebhook addSubscriptionsItem(String subscriptionsItem) {
    if (this.subscriptions == null) {
      this.subscriptions = new ArrayList<>();
    }
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

 /**
   * Get dailySettings
   * @return dailySettings
  **/
  public CreateAlmanaxWebhookDailySettings getDailySettings() {
    return dailySettings;
  }

  /**
    * Set dailySettings
  **/
  public void setDailySettings(CreateAlmanaxWebhookDailySettings dailySettings) {
    this.dailySettings = dailySettings;
  }

  public PutAlmanaxWebhook dailySettings(CreateAlmanaxWebhookDailySettings dailySettings) {
    this.dailySettings = dailySettings;
    return this;
  }

 /**
   * If false, it will use common local time formats and weekday translations. If true, the format is YYYY-MM-DD.
   * @return isoDate
  **/
  public Boolean getIsoDate() {
    return isoDate;
  }

  /**
    * Set isoDate
  **/
  public void setIsoDate(Boolean isoDate) {
    this.isoDate = isoDate;
  }

  public PutAlmanaxWebhook isoDate(Boolean isoDate) {
    this.isoDate = isoDate;
    return this;
  }

 /**
   * Almanax bonus ids mapped to array of mentions.
   * @return mentions
  **/
  public Map<String, List<CreateAlmanaxWebhookMentionsValueInner>> getMentions() {
    return mentions;
  }

  /**
    * Set mentions
  **/
  public void setMentions(Map<String, List<CreateAlmanaxWebhookMentionsValueInner>> mentions) {
    this.mentions = mentions;
  }

  public PutAlmanaxWebhook mentions(Map<String, List<CreateAlmanaxWebhookMentionsValueInner>> mentions) {
    this.mentions = mentions;
    return this;
  }

  public PutAlmanaxWebhook putMentionsItem(String key, List<CreateAlmanaxWebhookMentionsValueInner> mentionsItem) {
    if (this.mentions == null) {
      this.mentions = new HashMap<>();
    }
    this.mentions.put(key, mentionsItem);
    return this;
  }

 /**
   * Get intervals
   * @return intervals
  **/
  public Set<IntervalsEnum> getIntervals() {
    return intervals;
  }

  /**
    * Set intervals
  **/
  public void setIntervals(Set<IntervalsEnum> intervals) {
    this.intervals = intervals;
  }

  public PutAlmanaxWebhook intervals(Set<IntervalsEnum> intervals) {
    this.intervals = intervals;
    return this;
  }

  public PutAlmanaxWebhook addIntervalsItem(IntervalsEnum intervalsItem) {
    if (this.intervals == null) {
      this.intervals = new LinkedHashSet<>();
    }
    this.intervals.add(intervalsItem);
    return this;
  }

 /**
   * When to post the weekly preview at the specified time.
   * @return weeklyWeekday
  **/
  public WeeklyWeekdayEnum getWeeklyWeekday() {
    return weeklyWeekday;
  }

  /**
    * Set weeklyWeekday
  **/
  public void setWeeklyWeekday(WeeklyWeekdayEnum weeklyWeekday) {
    this.weeklyWeekday = weeklyWeekday;
  }

  public PutAlmanaxWebhook weeklyWeekday(WeeklyWeekdayEnum weeklyWeekday) {
    this.weeklyWeekday = weeklyWeekday;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutAlmanaxWebhook {\n");
    
    sb.append("    bonusWhitelist: ").append(toIndentedString(bonusWhitelist)).append("\n");
    sb.append("    bonusBlacklist: ").append(toIndentedString(bonusBlacklist)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("    dailySettings: ").append(toIndentedString(dailySettings)).append("\n");
    sb.append("    isoDate: ").append(toIndentedString(isoDate)).append("\n");
    sb.append("    mentions: ").append(toIndentedString(mentions)).append("\n");
    sb.append("    intervals: ").append(toIndentedString(intervals)).append("\n");
    sb.append("    weeklyWeekday: ").append(toIndentedString(weeklyWeekday)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
