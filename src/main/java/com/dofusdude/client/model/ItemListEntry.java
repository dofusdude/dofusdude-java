/**
 * dofusdude
 * # A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save - [Go](https://github.com/dofusdude/dodugo) go get -u github.com/dofusdude/dodugo - [Python](https://github.com/dofusdude/dofusdude-py) pip install dofusdude - [PHP](https://github.com/dofusdude/dofusdude-php)  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my Discord.   ## Deploy now. Use forever. Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  ## Thank you! I highly welcome everyone on my [Discord](https://discord.gg/3EtHskZD8h) to just talk about projects and use cases or give feedback of any kind.  The servers have a fixed monthly cost to provide very fast responses. If you want to help me keeping them running or simply donate to that cause, consider becoming a [GitHub Sponsor](https://github.com/sponsors/dofusdude).
 *
 * The version of the OpenAPI document: 0.8.3
 * Contact: stelzo@steado.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dofusdude.client.model;

import com.dofusdude.client.model.ConditionEntry;
import com.dofusdude.client.model.ConditionTreeNode;
import com.dofusdude.client.model.EffectsEntry;
import com.dofusdude.client.model.ImageUrls;
import com.dofusdude.client.model.ItemListEntryParentSet;
import com.dofusdude.client.model.ItemListEntryRange;
import com.dofusdude.client.model.ItemsListEntryTypedType;
import com.dofusdude.client.model.RecipeEntry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;


public class ItemListEntry  {
  
  @JsonbProperty("ankama_id")
  private Integer ankamaId;

  @JsonbProperty("name")
  private String name;

  @JsonbProperty("type")
  private ItemsListEntryTypedType type;

  @JsonbProperty("level")
  private Integer level;

  @JsonbProperty("image_urls")
  private ImageUrls imageUrls;

  @JsonbProperty("recipe")
  private List<RecipeEntry> recipe = null;

  @JsonbProperty("description")
  private String description;

  @JsonbProperty("conditions")
  private List<ConditionEntry> conditions = null;

  @JsonbProperty("condition_tree")
  private ConditionTreeNode conditionTree;

  @JsonbProperty("effects")
  private List<EffectsEntry> effects = null;

  @JsonbProperty("is_weapon")
  private Boolean isWeapon;

  @JsonbProperty("pods")
  private Integer pods;

  @JsonbProperty("parent_set")
  private ItemListEntryParentSet parentSet;

  @JsonbProperty("critical_hit_probability")
  private Integer criticalHitProbability;

  @JsonbProperty("critical_hit_bonus")
  private Integer criticalHitBonus;

  @JsonbProperty("is_two_handed")
  private Boolean isTwoHanded;

  @JsonbProperty("max_cast_per_turn")
  private Integer maxCastPerTurn;

  @JsonbProperty("ap_cost")
  private Integer apCost;

  @JsonbProperty("range")
  private ItemListEntryRange range;

 /**
   * Get ankamaId
   * @return ankamaId
  **/
  public Integer getAnkamaId() {
    return ankamaId;
  }

  /**
    * Set ankamaId
  **/
  public void setAnkamaId(Integer ankamaId) {
    this.ankamaId = ankamaId;
  }

  public ItemListEntry ankamaId(Integer ankamaId) {
    this.ankamaId = ankamaId;
    return this;
  }

 /**
   * Get name
   * @return name
  **/
  public String getName() {
    return name;
  }

  /**
    * Set name
  **/
  public void setName(String name) {
    this.name = name;
  }

  public ItemListEntry name(String name) {
    this.name = name;
    return this;
  }

 /**
   * Get type
   * @return type
  **/
  public ItemsListEntryTypedType getType() {
    return type;
  }

  /**
    * Set type
  **/
  public void setType(ItemsListEntryTypedType type) {
    this.type = type;
  }

  public ItemListEntry type(ItemsListEntryTypedType type) {
    this.type = type;
    return this;
  }

 /**
   * Get level
   * @return level
  **/
  public Integer getLevel() {
    return level;
  }

  /**
    * Set level
  **/
  public void setLevel(Integer level) {
    this.level = level;
  }

  public ItemListEntry level(Integer level) {
    this.level = level;
    return this;
  }

 /**
   * Get imageUrls
   * @return imageUrls
  **/
  public ImageUrls getImageUrls() {
    return imageUrls;
  }

  /**
    * Set imageUrls
  **/
  public void setImageUrls(ImageUrls imageUrls) {
    this.imageUrls = imageUrls;
  }

  public ItemListEntry imageUrls(ImageUrls imageUrls) {
    this.imageUrls = imageUrls;
    return this;
  }

 /**
   * Get recipe
   * @return recipe
  **/
  public List<RecipeEntry> getRecipe() {
    return recipe;
  }

  /**
    * Set recipe
  **/
  public void setRecipe(List<RecipeEntry> recipe) {
    this.recipe = recipe;
  }

  public ItemListEntry recipe(List<RecipeEntry> recipe) {
    this.recipe = recipe;
    return this;
  }

  public ItemListEntry addRecipeItem(RecipeEntry recipeItem) {
    if (this.recipe == null) {
      this.recipe = new ArrayList<>();
    }
    this.recipe.add(recipeItem);
    return this;
  }

 /**
   * Get description
   * @return description
  **/
  public String getDescription() {
    return description;
  }

  /**
    * Set description
  **/
  public void setDescription(String description) {
    this.description = description;
  }

  public ItemListEntry description(String description) {
    this.description = description;
    return this;
  }

 /**
   * Get conditions
   * @return conditions
   * @deprecated
  **/
  @Deprecated
  public List<ConditionEntry> getConditions() {
    return conditions;
  }

  /**
    * Set conditions
  **/
  public void setConditions(List<ConditionEntry> conditions) {
    this.conditions = conditions;
  }

  public ItemListEntry conditions(List<ConditionEntry> conditions) {
    this.conditions = conditions;
    return this;
  }

  public ItemListEntry addConditionsItem(ConditionEntry conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

 /**
   * Get conditionTree
   * @return conditionTree
  **/
  public ConditionTreeNode getConditionTree() {
    return conditionTree;
  }

  /**
    * Set conditionTree
  **/
  public void setConditionTree(ConditionTreeNode conditionTree) {
    this.conditionTree = conditionTree;
  }

  public ItemListEntry conditionTree(ConditionTreeNode conditionTree) {
    this.conditionTree = conditionTree;
    return this;
  }

 /**
   * Get effects
   * @return effects
  **/
  public List<EffectsEntry> getEffects() {
    return effects;
  }

  /**
    * Set effects
  **/
  public void setEffects(List<EffectsEntry> effects) {
    this.effects = effects;
  }

  public ItemListEntry effects(List<EffectsEntry> effects) {
    this.effects = effects;
    return this;
  }

  public ItemListEntry addEffectsItem(EffectsEntry effectsItem) {
    if (this.effects == null) {
      this.effects = new ArrayList<>();
    }
    this.effects.add(effectsItem);
    return this;
  }

 /**
   * Get isWeapon
   * @return isWeapon
  **/
  public Boolean getIsWeapon() {
    return isWeapon;
  }

  /**
    * Set isWeapon
  **/
  public void setIsWeapon(Boolean isWeapon) {
    this.isWeapon = isWeapon;
  }

  public ItemListEntry isWeapon(Boolean isWeapon) {
    this.isWeapon = isWeapon;
    return this;
  }

 /**
   * Get pods
   * @return pods
  **/
  public Integer getPods() {
    return pods;
  }

  /**
    * Set pods
  **/
  public void setPods(Integer pods) {
    this.pods = pods;
  }

  public ItemListEntry pods(Integer pods) {
    this.pods = pods;
    return this;
  }

 /**
   * Get parentSet
   * @return parentSet
  **/
  public ItemListEntryParentSet getParentSet() {
    return parentSet;
  }

  /**
    * Set parentSet
  **/
  public void setParentSet(ItemListEntryParentSet parentSet) {
    this.parentSet = parentSet;
  }

  public ItemListEntry parentSet(ItemListEntryParentSet parentSet) {
    this.parentSet = parentSet;
    return this;
  }

 /**
   * Get criticalHitProbability
   * @return criticalHitProbability
  **/
  public Integer getCriticalHitProbability() {
    return criticalHitProbability;
  }

  /**
    * Set criticalHitProbability
  **/
  public void setCriticalHitProbability(Integer criticalHitProbability) {
    this.criticalHitProbability = criticalHitProbability;
  }

  public ItemListEntry criticalHitProbability(Integer criticalHitProbability) {
    this.criticalHitProbability = criticalHitProbability;
    return this;
  }

 /**
   * Get criticalHitBonus
   * @return criticalHitBonus
  **/
  public Integer getCriticalHitBonus() {
    return criticalHitBonus;
  }

  /**
    * Set criticalHitBonus
  **/
  public void setCriticalHitBonus(Integer criticalHitBonus) {
    this.criticalHitBonus = criticalHitBonus;
  }

  public ItemListEntry criticalHitBonus(Integer criticalHitBonus) {
    this.criticalHitBonus = criticalHitBonus;
    return this;
  }

 /**
   * Get isTwoHanded
   * @return isTwoHanded
  **/
  public Boolean getIsTwoHanded() {
    return isTwoHanded;
  }

  /**
    * Set isTwoHanded
  **/
  public void setIsTwoHanded(Boolean isTwoHanded) {
    this.isTwoHanded = isTwoHanded;
  }

  public ItemListEntry isTwoHanded(Boolean isTwoHanded) {
    this.isTwoHanded = isTwoHanded;
    return this;
  }

 /**
   * Get maxCastPerTurn
   * @return maxCastPerTurn
  **/
  public Integer getMaxCastPerTurn() {
    return maxCastPerTurn;
  }

  /**
    * Set maxCastPerTurn
  **/
  public void setMaxCastPerTurn(Integer maxCastPerTurn) {
    this.maxCastPerTurn = maxCastPerTurn;
  }

  public ItemListEntry maxCastPerTurn(Integer maxCastPerTurn) {
    this.maxCastPerTurn = maxCastPerTurn;
    return this;
  }

 /**
   * Get apCost
   * @return apCost
  **/
  public Integer getApCost() {
    return apCost;
  }

  /**
    * Set apCost
  **/
  public void setApCost(Integer apCost) {
    this.apCost = apCost;
  }

  public ItemListEntry apCost(Integer apCost) {
    this.apCost = apCost;
    return this;
  }

 /**
   * Get range
   * @return range
  **/
  public ItemListEntryRange getRange() {
    return range;
  }

  /**
    * Set range
  **/
  public void setRange(ItemListEntryRange range) {
    this.range = range;
  }

  public ItemListEntry range(ItemListEntryRange range) {
    this.range = range;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemListEntry {\n");
    
    sb.append("    ankamaId: ").append(toIndentedString(ankamaId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    imageUrls: ").append(toIndentedString(imageUrls)).append("\n");
    sb.append("    recipe: ").append(toIndentedString(recipe)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    conditionTree: ").append(toIndentedString(conditionTree)).append("\n");
    sb.append("    effects: ").append(toIndentedString(effects)).append("\n");
    sb.append("    isWeapon: ").append(toIndentedString(isWeapon)).append("\n");
    sb.append("    pods: ").append(toIndentedString(pods)).append("\n");
    sb.append("    parentSet: ").append(toIndentedString(parentSet)).append("\n");
    sb.append("    criticalHitProbability: ").append(toIndentedString(criticalHitProbability)).append("\n");
    sb.append("    criticalHitBonus: ").append(toIndentedString(criticalHitBonus)).append("\n");
    sb.append("    isTwoHanded: ").append(toIndentedString(isTwoHanded)).append("\n");
    sb.append("    maxCastPerTurn: ").append(toIndentedString(maxCastPerTurn)).append("\n");
    sb.append("    apCost: ").append(toIndentedString(apCost)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
