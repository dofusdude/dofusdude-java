/*
 * dofusdude
 * # Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js --save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts --save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 
 *
 * The version of the OpenAPI document: 1.0.0-rc.7
 * Contact: stelzo@steado.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dofusdude.client.api;

import com.dofusdude.client.ApiCallback;
import com.dofusdude.client.ApiClient;
import com.dofusdude.client.ApiException;
import com.dofusdude.client.ApiResponse;
import com.dofusdude.client.Configuration;
import com.dofusdude.client.Pair;
import com.dofusdude.client.ProgressRequestBody;
import com.dofusdude.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.dofusdude.client.model.EquipmentSet;
import com.dofusdude.client.model.Error;
import com.dofusdude.client.model.ListEquipmentSet;
import com.dofusdude.client.model.ListEquipmentSets;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAllSetsList
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param sortLevel sort the resulting list by level, default unsorted (optional)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param acceptEncoding optional compression for saving bandwidth (optional)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got cosmetic items in it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSetsListCall(String language, String game, String sortLevel, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, String acceptEncoding, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{game}/v1/{language}/sets/all"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "game" + "}", localVarApiClient.escapeString(game.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort[level]", sortLevel));
        }

        if (filterMinHighestEquipmentLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[min_highest_equipment_level]", filterMinHighestEquipmentLevel));
        }

        if (filterMaxHighestEquipmentLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[max_highest_equipment_level]", filterMaxHighestEquipmentLevel));
        }

        if (filterContainsCosmeticsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[contains_cosmetics_only]", filterContainsCosmeticsOnly));
        }

        if (filterContainsCosmetics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[contains_cosmetics]", filterContainsCosmetics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptEncoding != null) {
            localVarHeaderParams.put("Accept-Encoding", localVarApiClient.parameterToString(acceptEncoding));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSetsListValidateBeforeCall(String language, String game, String sortLevel, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, String acceptEncoding, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getAllSetsList(Async)");
        }

        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling getAllSetsList(Async)");
        }

        return getAllSetsListCall(language, game, sortLevel, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, acceptEncoding, filterContainsCosmeticsOnly, filterContainsCosmetics, _callback);

    }

    /**
     * List All Sets
     * Retrieve all sets with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param sortLevel sort the resulting list by level, default unsorted (optional)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param acceptEncoding optional compression for saving bandwidth (optional)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got cosmetic items in it. (optional)
     * @return ListEquipmentSets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListEquipmentSets getAllSetsList(String language, String game, String sortLevel, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, String acceptEncoding, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics) throws ApiException {
        ApiResponse<ListEquipmentSets> localVarResp = getAllSetsListWithHttpInfo(language, game, sortLevel, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, acceptEncoding, filterContainsCosmeticsOnly, filterContainsCosmetics);
        return localVarResp.getData();
    }

    /**
     * List All Sets
     * Retrieve all sets with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param sortLevel sort the resulting list by level, default unsorted (optional)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param acceptEncoding optional compression for saving bandwidth (optional)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got cosmetic items in it. (optional)
     * @return ApiResponse&lt;ListEquipmentSets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEquipmentSets> getAllSetsListWithHttpInfo(String language, String game, String sortLevel, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, String acceptEncoding, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics) throws ApiException {
        okhttp3.Call localVarCall = getAllSetsListValidateBeforeCall(language, game, sortLevel, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, acceptEncoding, filterContainsCosmeticsOnly, filterContainsCosmetics, null);
        Type localVarReturnType = new TypeToken<ListEquipmentSets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All Sets (asynchronously)
     * Retrieve all sets with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param sortLevel sort the resulting list by level, default unsorted (optional)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param acceptEncoding optional compression for saving bandwidth (optional)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got cosmetic items in it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSetsListAsync(String language, String game, String sortLevel, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, String acceptEncoding, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics, final ApiCallback<ListEquipmentSets> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSetsListValidateBeforeCall(language, game, sortLevel, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, acceptEncoding, filterContainsCosmeticsOnly, filterContainsCosmetics, _callback);
        Type localVarReturnType = new TypeToken<ListEquipmentSets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSetsList
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param sortLevel sort the resulting list by level, default unsorted (optional)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param pageSize size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param pageNumber page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param fieldsSet adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got cosmetic items in it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSetsListCall(String language, String game, String sortLevel, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, Integer pageSize, Integer pageNumber, Set<String> fieldsSet, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{game}/v1/{language}/sets"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "game" + "}", localVarApiClient.escapeString(game.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort[level]", sortLevel));
        }

        if (filterMinHighestEquipmentLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[min_highest_equipment_level]", filterMinHighestEquipmentLevel));
        }

        if (filterMaxHighestEquipmentLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[max_highest_equipment_level]", filterMaxHighestEquipmentLevel));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (fieldsSet != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[set]", fieldsSet));
        }

        if (filterContainsCosmeticsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[contains_cosmetics_only]", filterContainsCosmeticsOnly));
        }

        if (filterContainsCosmetics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[contains_cosmetics]", filterContainsCosmetics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSetsListValidateBeforeCall(String language, String game, String sortLevel, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, Integer pageSize, Integer pageNumber, Set<String> fieldsSet, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getSetsList(Async)");
        }

        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling getSetsList(Async)");
        }

        return getSetsListCall(language, game, sortLevel, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, pageSize, pageNumber, fieldsSet, filterContainsCosmeticsOnly, filterContainsCosmetics, _callback);

    }

    /**
     * List Sets
     * Retrieve a list of sets.
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param sortLevel sort the resulting list by level, default unsorted (optional)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param pageSize size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param pageNumber page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param fieldsSet adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got cosmetic items in it. (optional)
     * @return ListEquipmentSets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListEquipmentSets getSetsList(String language, String game, String sortLevel, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, Integer pageSize, Integer pageNumber, Set<String> fieldsSet, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics) throws ApiException {
        ApiResponse<ListEquipmentSets> localVarResp = getSetsListWithHttpInfo(language, game, sortLevel, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, pageSize, pageNumber, fieldsSet, filterContainsCosmeticsOnly, filterContainsCosmetics);
        return localVarResp.getData();
    }

    /**
     * List Sets
     * Retrieve a list of sets.
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param sortLevel sort the resulting list by level, default unsorted (optional)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param pageSize size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param pageNumber page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param fieldsSet adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got cosmetic items in it. (optional)
     * @return ApiResponse&lt;ListEquipmentSets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEquipmentSets> getSetsListWithHttpInfo(String language, String game, String sortLevel, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, Integer pageSize, Integer pageNumber, Set<String> fieldsSet, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics) throws ApiException {
        okhttp3.Call localVarCall = getSetsListValidateBeforeCall(language, game, sortLevel, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, pageSize, pageNumber, fieldsSet, filterContainsCosmeticsOnly, filterContainsCosmetics, null);
        Type localVarReturnType = new TypeToken<ListEquipmentSets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Sets (asynchronously)
     * Retrieve a list of sets.
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param sortLevel sort the resulting list by level, default unsorted (optional)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param pageSize size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param pageNumber page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param fieldsSet adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got cosmetic items in it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSetsListAsync(String language, String game, String sortLevel, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, Integer pageSize, Integer pageNumber, Set<String> fieldsSet, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics, final ApiCallback<ListEquipmentSets> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSetsListValidateBeforeCall(language, game, sortLevel, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, pageSize, pageNumber, fieldsSet, filterContainsCosmeticsOnly, filterContainsCosmetics, _callback);
        Type localVarReturnType = new TypeToken<ListEquipmentSets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSetsSearch
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param query case sensitive search query (required)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param limit maximum number of returned results (optional, default to 8)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got any cosmetic items in it (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSetsSearchCall(String language, String game, String query, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, Integer limit, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{game}/v1/{language}/sets/search"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "game" + "}", localVarApiClient.escapeString(game.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (filterMinHighestEquipmentLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[min_highest_equipment_level]", filterMinHighestEquipmentLevel));
        }

        if (filterMaxHighestEquipmentLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[max_highest_equipment_level]", filterMaxHighestEquipmentLevel));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filterContainsCosmeticsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[contains_cosmetics_only]", filterContainsCosmeticsOnly));
        }

        if (filterContainsCosmetics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[contains_cosmetics]", filterContainsCosmetics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSetsSearchValidateBeforeCall(String language, String game, String query, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, Integer limit, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getSetsSearch(Async)");
        }

        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling getSetsSearch(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getSetsSearch(Async)");
        }

        return getSetsSearchCall(language, game, query, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, limit, filterContainsCosmeticsOnly, filterContainsCosmetics, _callback);

    }

    /**
     * Search Sets
     * Search in all names and descriptions of sets with a query.
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param query case sensitive search query (required)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param limit maximum number of returned results (optional, default to 8)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got any cosmetic items in it (optional)
     * @return List&lt;ListEquipmentSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEquipmentSet> getSetsSearch(String language, String game, String query, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, Integer limit, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics) throws ApiException {
        ApiResponse<List<ListEquipmentSet>> localVarResp = getSetsSearchWithHttpInfo(language, game, query, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, limit, filterContainsCosmeticsOnly, filterContainsCosmetics);
        return localVarResp.getData();
    }

    /**
     * Search Sets
     * Search in all names and descriptions of sets with a query.
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param query case sensitive search query (required)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param limit maximum number of returned results (optional, default to 8)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got any cosmetic items in it (optional)
     * @return ApiResponse&lt;List&lt;ListEquipmentSet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEquipmentSet>> getSetsSearchWithHttpInfo(String language, String game, String query, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, Integer limit, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics) throws ApiException {
        okhttp3.Call localVarCall = getSetsSearchValidateBeforeCall(language, game, query, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, limit, filterContainsCosmeticsOnly, filterContainsCosmetics, null);
        Type localVarReturnType = new TypeToken<List<ListEquipmentSet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Sets (asynchronously)
     * Search in all names and descriptions of sets with a query.
     * @param language a valid language code (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param query case sensitive search query (required)
     * @param filterMinHighestEquipmentLevel only results where the equipment with the highest level is above or equal to this value (optional)
     * @param filterMaxHighestEquipmentLevel only results where the equipment with the highest level is below or equal to this value (optional)
     * @param limit maximum number of returned results (optional, default to 8)
     * @param filterContainsCosmeticsOnly filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment. (optional)
     * @param filterContainsCosmetics filter sets based on if they got any cosmetic items in it (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSetsSearchAsync(String language, String game, String query, Integer filterMinHighestEquipmentLevel, Integer filterMaxHighestEquipmentLevel, Integer limit, Boolean filterContainsCosmeticsOnly, Boolean filterContainsCosmetics, final ApiCallback<List<ListEquipmentSet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSetsSearchValidateBeforeCall(language, game, query, filterMinHighestEquipmentLevel, filterMaxHighestEquipmentLevel, limit, filterContainsCosmeticsOnly, filterContainsCosmetics, _callback);
        Type localVarReturnType = new TypeToken<List<ListEquipmentSet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSetsSingle
     * @param language a valid language code (required)
     * @param ankamaId identifier (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSetsSingleCall(String language, Integer ankamaId, String game, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{game}/v1/{language}/sets/{ankama_id}"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "ankama_id" + "}", localVarApiClient.escapeString(ankamaId.toString()))
            .replace("{" + "game" + "}", localVarApiClient.escapeString(game.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSetsSingleValidateBeforeCall(String language, Integer ankamaId, String game, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getSetsSingle(Async)");
        }

        // verify the required parameter 'ankamaId' is set
        if (ankamaId == null) {
            throw new ApiException("Missing the required parameter 'ankamaId' when calling getSetsSingle(Async)");
        }

        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling getSetsSingle(Async)");
        }

        return getSetsSingleCall(language, ankamaId, game, _callback);

    }

    /**
     * Single Sets
     * Retrieve a specific set with id.
     * @param language a valid language code (required)
     * @param ankamaId identifier (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @return EquipmentSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EquipmentSet getSetsSingle(String language, Integer ankamaId, String game) throws ApiException {
        ApiResponse<EquipmentSet> localVarResp = getSetsSingleWithHttpInfo(language, ankamaId, game);
        return localVarResp.getData();
    }

    /**
     * Single Sets
     * Retrieve a specific set with id.
     * @param language a valid language code (required)
     * @param ankamaId identifier (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @return ApiResponse&lt;EquipmentSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EquipmentSet> getSetsSingleWithHttpInfo(String language, Integer ankamaId, String game) throws ApiException {
        okhttp3.Call localVarCall = getSetsSingleValidateBeforeCall(language, ankamaId, game, null);
        Type localVarReturnType = new TypeToken<EquipmentSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single Sets (asynchronously)
     * Retrieve a specific set with id.
     * @param language a valid language code (required)
     * @param ankamaId identifier (required)
     * @param game game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSetsSingleAsync(String language, Integer ankamaId, String game, final ApiCallback<EquipmentSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSetsSingleValidateBeforeCall(language, ankamaId, game, _callback);
        Type localVarReturnType = new TypeToken<EquipmentSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
