/*
 * dofusdude
 * # A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js --save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts --save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [PHP](https://github.com/dofusdude/dofusdude-php) - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: stelzo@steado.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dofusdude.client.api;

import com.dofusdude.client.ApiCallback;
import com.dofusdude.client.ApiClient;
import com.dofusdude.client.ApiException;
import com.dofusdude.client.ApiResponse;
import com.dofusdude.client.Configuration;
import com.dofusdude.client.Pair;
import com.dofusdude.client.ProgressRequestBody;
import com.dofusdude.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.dofusdude.client.model.Mount;
import com.dofusdude.client.model.MountListEntry;
import com.dofusdude.client.model.MountsListPaged;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAllMountsList
     * @param language a valid language code (required)
     * @param game  (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param acceptEncoding optional compression for saving bandwidth (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllMountsListCall(String language, String game, String filterFamilyName, String acceptEncoding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{game}/{language}/mounts/all"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "game" + "}", localVarApiClient.escapeString(game.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterFamilyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[family_name]", filterFamilyName));
        }

        if (acceptEncoding != null) {
            localVarHeaderParams.put("Accept-Encoding", localVarApiClient.parameterToString(acceptEncoding));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllMountsListValidateBeforeCall(String language, String game, String filterFamilyName, String acceptEncoding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getAllMountsList(Async)");
        }

        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling getAllMountsList(Async)");
        }

        return getAllMountsListCall(language, game, filterFamilyName, acceptEncoding, _callback);

    }

    /**
     * List All Mounts
     * Retrieve all mounts with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
     * @param language a valid language code (required)
     * @param game  (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param acceptEncoding optional compression for saving bandwidth (optional)
     * @return MountsListPaged
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public MountsListPaged getAllMountsList(String language, String game, String filterFamilyName, String acceptEncoding) throws ApiException {
        ApiResponse<MountsListPaged> localVarResp = getAllMountsListWithHttpInfo(language, game, filterFamilyName, acceptEncoding);
        return localVarResp.getData();
    }

    /**
     * List All Mounts
     * Retrieve all mounts with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
     * @param language a valid language code (required)
     * @param game  (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param acceptEncoding optional compression for saving bandwidth (optional)
     * @return ApiResponse&lt;MountsListPaged&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountsListPaged> getAllMountsListWithHttpInfo(String language, String game, String filterFamilyName, String acceptEncoding) throws ApiException {
        okhttp3.Call localVarCall = getAllMountsListValidateBeforeCall(language, game, filterFamilyName, acceptEncoding, null);
        Type localVarReturnType = new TypeToken<MountsListPaged>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All Mounts (asynchronously)
     * Retrieve all mounts with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
     * @param language a valid language code (required)
     * @param game  (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param acceptEncoding optional compression for saving bandwidth (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllMountsListAsync(String language, String game, String filterFamilyName, String acceptEncoding, final ApiCallback<MountsListPaged> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllMountsListValidateBeforeCall(language, game, filterFamilyName, acceptEncoding, _callback);
        Type localVarReturnType = new TypeToken<MountsListPaged>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMountsList
     * @param language a valid language code (required)
     * @param game  (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param pageSize size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param pageNumber page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param fieldsMount adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMountsListCall(String language, String game, String filterFamilyName, Integer pageSize, Integer pageNumber, Set<String> fieldsMount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{game}/{language}/mounts"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "game" + "}", localVarApiClient.escapeString(game.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterFamilyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[family_name]", filterFamilyName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (fieldsMount != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields[mount]", fieldsMount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMountsListValidateBeforeCall(String language, String game, String filterFamilyName, Integer pageSize, Integer pageNumber, Set<String> fieldsMount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getMountsList(Async)");
        }

        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling getMountsList(Async)");
        }

        return getMountsListCall(language, game, filterFamilyName, pageSize, pageNumber, fieldsMount, _callback);

    }

    /**
     * List Mounts
     * Retrieve a list of mounts.
     * @param language a valid language code (required)
     * @param game  (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param pageSize size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param pageNumber page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param fieldsMount adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @return MountsListPaged
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public MountsListPaged getMountsList(String language, String game, String filterFamilyName, Integer pageSize, Integer pageNumber, Set<String> fieldsMount) throws ApiException {
        ApiResponse<MountsListPaged> localVarResp = getMountsListWithHttpInfo(language, game, filterFamilyName, pageSize, pageNumber, fieldsMount);
        return localVarResp.getData();
    }

    /**
     * List Mounts
     * Retrieve a list of mounts.
     * @param language a valid language code (required)
     * @param game  (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param pageSize size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param pageNumber page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param fieldsMount adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @return ApiResponse&lt;MountsListPaged&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountsListPaged> getMountsListWithHttpInfo(String language, String game, String filterFamilyName, Integer pageSize, Integer pageNumber, Set<String> fieldsMount) throws ApiException {
        okhttp3.Call localVarCall = getMountsListValidateBeforeCall(language, game, filterFamilyName, pageSize, pageNumber, fieldsMount, null);
        Type localVarReturnType = new TypeToken<MountsListPaged>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Mounts (asynchronously)
     * Retrieve a list of mounts.
     * @param language a valid language code (required)
     * @param game  (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param pageSize size of the results from the list. -1 disables pagination and gets all in one response. (optional)
     * @param pageNumber page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)
     * @param fieldsMount adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMountsListAsync(String language, String game, String filterFamilyName, Integer pageSize, Integer pageNumber, Set<String> fieldsMount, final ApiCallback<MountsListPaged> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMountsListValidateBeforeCall(language, game, filterFamilyName, pageSize, pageNumber, fieldsMount, _callback);
        Type localVarReturnType = new TypeToken<MountsListPaged>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMountsSearch
     * @param language a valid language code (required)
     * @param game  (required)
     * @param query case sensitive search query (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param limit maximum number of returned results (optional, default to 8)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  Possibilities: - empty or no query  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found  Possibilities: - no hits for query </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMountsSearchCall(String language, String game, String query, String filterFamilyName, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{game}/{language}/mounts/search"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "game" + "}", localVarApiClient.escapeString(game.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (filterFamilyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[family_name]", filterFamilyName));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMountsSearchValidateBeforeCall(String language, String game, String query, String filterFamilyName, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getMountsSearch(Async)");
        }

        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling getMountsSearch(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getMountsSearch(Async)");
        }

        return getMountsSearchCall(language, game, query, filterFamilyName, limit, _callback);

    }

    /**
     * Search Mounts
     * Search in all names and descriptions of mounts with a query.
     * @param language a valid language code (required)
     * @param game  (required)
     * @param query case sensitive search query (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param limit maximum number of returned results (optional, default to 8)
     * @return List&lt;MountListEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  Possibilities: - empty or no query  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found  Possibilities: - no hits for query </td><td>  -  </td></tr>
     </table>
     */
    public List<MountListEntry> getMountsSearch(String language, String game, String query, String filterFamilyName, Integer limit) throws ApiException {
        ApiResponse<List<MountListEntry>> localVarResp = getMountsSearchWithHttpInfo(language, game, query, filterFamilyName, limit);
        return localVarResp.getData();
    }

    /**
     * Search Mounts
     * Search in all names and descriptions of mounts with a query.
     * @param language a valid language code (required)
     * @param game  (required)
     * @param query case sensitive search query (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param limit maximum number of returned results (optional, default to 8)
     * @return ApiResponse&lt;List&lt;MountListEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  Possibilities: - empty or no query  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found  Possibilities: - no hits for query </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MountListEntry>> getMountsSearchWithHttpInfo(String language, String game, String query, String filterFamilyName, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getMountsSearchValidateBeforeCall(language, game, query, filterFamilyName, limit, null);
        Type localVarReturnType = new TypeToken<List<MountListEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Mounts (asynchronously)
     * Search in all names and descriptions of mounts with a query.
     * @param language a valid language code (required)
     * @param game  (required)
     * @param query case sensitive search query (required)
     * @param filterFamilyName only results with the translated family name (optional)
     * @param limit maximum number of returned results (optional, default to 8)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mounts Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  Possibilities: - empty or no query  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found  Possibilities: - no hits for query </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMountsSearchAsync(String language, String game, String query, String filterFamilyName, Integer limit, final ApiCallback<List<MountListEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMountsSearchValidateBeforeCall(language, game, query, filterFamilyName, limit, _callback);
        Type localVarReturnType = new TypeToken<List<MountListEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMountsSingle
     * @param language a valid language code (required)
     * @param ankamaId identifier (required)
     * @param game  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  Possibilities: - invalid ankama id format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found  Possibilities: - nothing found for this ankama_id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMountsSingleCall(String language, Integer ankamaId, String game, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{game}/{language}/mounts/{ankama_id}"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()))
            .replace("{" + "ankama_id" + "}", localVarApiClient.escapeString(ankamaId.toString()))
            .replace("{" + "game" + "}", localVarApiClient.escapeString(game.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMountsSingleValidateBeforeCall(String language, Integer ankamaId, String game, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getMountsSingle(Async)");
        }

        // verify the required parameter 'ankamaId' is set
        if (ankamaId == null) {
            throw new ApiException("Missing the required parameter 'ankamaId' when calling getMountsSingle(Async)");
        }

        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling getMountsSingle(Async)");
        }

        return getMountsSingleCall(language, ankamaId, game, _callback);

    }

    /**
     * Single Mounts
     * Retrieve a specific mount with id.
     * @param language a valid language code (required)
     * @param ankamaId identifier (required)
     * @param game  (required)
     * @return Mount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  Possibilities: - invalid ankama id format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found  Possibilities: - nothing found for this ankama_id </td><td>  -  </td></tr>
     </table>
     */
    public Mount getMountsSingle(String language, Integer ankamaId, String game) throws ApiException {
        ApiResponse<Mount> localVarResp = getMountsSingleWithHttpInfo(language, ankamaId, game);
        return localVarResp.getData();
    }

    /**
     * Single Mounts
     * Retrieve a specific mount with id.
     * @param language a valid language code (required)
     * @param ankamaId identifier (required)
     * @param game  (required)
     * @return ApiResponse&lt;Mount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  Possibilities: - invalid ankama id format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found  Possibilities: - nothing found for this ankama_id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mount> getMountsSingleWithHttpInfo(String language, Integer ankamaId, String game) throws ApiException {
        okhttp3.Call localVarCall = getMountsSingleValidateBeforeCall(language, ankamaId, game, null);
        Type localVarReturnType = new TypeToken<Mount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single Mounts (asynchronously)
     * Retrieve a specific mount with id.
     * @param language a valid language code (required)
     * @param ankamaId identifier (required)
     * @param game  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request  Possibilities: - invalid ankama id format  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found  Possibilities: - nothing found for this ankama_id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMountsSingleAsync(String language, Integer ankamaId, String game, final ApiCallback<Mount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMountsSingleValidateBeforeCall(language, ankamaId, game, _callback);
        Type localVarReturnType = new TypeToken<Mount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
