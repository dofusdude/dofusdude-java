/**
 * dofusdude
 * # A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save - [Go](https://github.com/dofusdude/dodugo) go get -u github.com/dofusdude/dodugo - [Python](https://github.com/dofusdude/dofusdude-py) pip install dofusdude - [PHP](https://github.com/dofusdude/dofusdude-php)  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my Discord.   ## Deploy now. Use forever. Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  ## Thank you! I highly welcome everyone on my [Discord](https://discord.gg/3EtHskZD8h) to just talk about projects and use cases or give feedback of any kind.  The servers have a fixed monthly cost to provide very fast responses. If you want to help me keeping them running or simply donate to that cause, consider becoming a [GitHub Sponsor](https://github.com/sponsors/dofusdude).
 *
 * The version of the OpenAPI document: 0.8.3
 * Contact: stelzo@steado.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.dofusdude.client.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;


public class TwitterWebhook  {
  
  @JsonbProperty("id")
  private UUID id;

  @JsonbProperty("whitelist")
  private List<String> whitelist = null;

  @JsonbProperty("blacklist")
  private List<String> blacklist = null;

  @JsonbProperty("subscriptions")
  private List<String> subscriptions = null;

  @JsonbTypeSerializer(FormatEnum.Serializer.class)
  @JsonbTypeDeserializer(FormatEnum.Deserializer.class)
  public enum FormatEnum {

    DISCORD(String.valueOf("discord"));


    String value;

    FormatEnum (String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static final class Deserializer implements JsonbDeserializer<FormatEnum> {
        @Override
        public FormatEnum deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
            for (FormatEnum b : FormatEnum.values()) {
                if (String.valueOf(b.value).equals(parser.getString())) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + parser.getString() + "'");
        }
    }

    public static final class Serializer implements JsonbSerializer<FormatEnum> {
        @Override
        public void serialize(FormatEnum obj, JsonGenerator generator, SerializationContext ctx) {
            generator.write(obj.value);
        }
    }
  }

  @JsonbProperty("format")
  private FormatEnum format;

  @JsonbProperty("preview_length")
  private Integer previewLength;

  @JsonbProperty("created_at")
  private Date createdAt;

  @JsonbProperty("last_fired_at")
  private Date lastFiredAt;

  @JsonbProperty("updated_at")
  private Date updatedAt;

 /**
   * Get id
   * @return id
  **/
  public UUID getId() {
    return id;
  }

  /**
    * Set id
  **/
  public void setId(UUID id) {
    this.id = id;
  }

  public TwitterWebhook id(UUID id) {
    this.id = id;
    return this;
  }

 /**
   * Get whitelist
   * @return whitelist
  **/
  public List<String> getWhitelist() {
    return whitelist;
  }

  /**
    * Set whitelist
  **/
  public void setWhitelist(List<String> whitelist) {
    this.whitelist = whitelist;
  }

  public TwitterWebhook whitelist(List<String> whitelist) {
    this.whitelist = whitelist;
    return this;
  }

  public TwitterWebhook addWhitelistItem(String whitelistItem) {
    if (this.whitelist == null) {
      this.whitelist = new ArrayList<>();
    }
    this.whitelist.add(whitelistItem);
    return this;
  }

 /**
   * Get blacklist
   * @return blacklist
  **/
  public List<String> getBlacklist() {
    return blacklist;
  }

  /**
    * Set blacklist
  **/
  public void setBlacklist(List<String> blacklist) {
    this.blacklist = blacklist;
  }

  public TwitterWebhook blacklist(List<String> blacklist) {
    this.blacklist = blacklist;
    return this;
  }

  public TwitterWebhook addBlacklistItem(String blacklistItem) {
    if (this.blacklist == null) {
      this.blacklist = new ArrayList<>();
    }
    this.blacklist.add(blacklistItem);
    return this;
  }

 /**
   * Get subscriptions
   * @return subscriptions
  **/
  public List<String> getSubscriptions() {
    return subscriptions;
  }

  /**
    * Set subscriptions
  **/
  public void setSubscriptions(List<String> subscriptions) {
    this.subscriptions = subscriptions;
  }

  public TwitterWebhook subscriptions(List<String> subscriptions) {
    this.subscriptions = subscriptions;
    return this;
  }

  public TwitterWebhook addSubscriptionsItem(String subscriptionsItem) {
    if (this.subscriptions == null) {
      this.subscriptions = new ArrayList<>();
    }
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

 /**
   * Get format
   * @return format
  **/
  public FormatEnum getFormat() {
    return format;
  }

  /**
    * Set format
  **/
  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public TwitterWebhook format(FormatEnum format) {
    this.format = format;
    return this;
  }

 /**
   * Get previewLength
   * minimum: 0
   * maximum: 280
   * @return previewLength
  **/
  public Integer getPreviewLength() {
    return previewLength;
  }

  /**
    * Set previewLength
  **/
  public void setPreviewLength(Integer previewLength) {
    this.previewLength = previewLength;
  }

  public TwitterWebhook previewLength(Integer previewLength) {
    this.previewLength = previewLength;
    return this;
  }

 /**
   * Get createdAt
   * @return createdAt
  **/
  public Date getCreatedAt() {
    return createdAt;
  }

  /**
    * Set createdAt
  **/
  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  public TwitterWebhook createdAt(Date createdAt) {
    this.createdAt = createdAt;
    return this;
  }

 /**
   * Get lastFiredAt
   * @return lastFiredAt
  **/
  public Date getLastFiredAt() {
    return lastFiredAt;
  }

  /**
    * Set lastFiredAt
  **/
  public void setLastFiredAt(Date lastFiredAt) {
    this.lastFiredAt = lastFiredAt;
  }

  public TwitterWebhook lastFiredAt(Date lastFiredAt) {
    this.lastFiredAt = lastFiredAt;
    return this;
  }

 /**
   * Get updatedAt
   * @return updatedAt
  **/
  public Date getUpdatedAt() {
    return updatedAt;
  }

  /**
    * Set updatedAt
  **/
  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  public TwitterWebhook updatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TwitterWebhook {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    whitelist: ").append(toIndentedString(whitelist)).append("\n");
    sb.append("    blacklist: ").append(toIndentedString(blacklist)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    previewLength: ").append(toIndentedString(previewLength)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastFiredAt: ").append(toIndentedString(lastFiredAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
